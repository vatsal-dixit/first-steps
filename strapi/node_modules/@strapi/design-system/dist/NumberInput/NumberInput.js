import { jsx as n, jsxs as h, Fragment as U } from "react/jsx-runtime";
import _, { useRef as b } from "react";
import { NumberParser as j, NumberFormatter as E } from "@internationalized/number";
import { CarretDown as N } from "@strapi/icons";
import M from "styled-components";
import { getDefaultLocale as q } from "../helpers/getDefaultLocale.js";
import { KeyboardKeys as g } from "../helpers/keyboardKeys.js";
import { useControllableState as z } from "../hooks/useControllableState.js";
import { useId as H } from "../hooks/useId.js";
import { Field as O } from "../Field/Field.js";
import { Flex as T } from "../Flex/Flex.js";
import { FieldLabel as W } from "../Field/FieldLabel.js";
import { FieldInput as X } from "../Field/FieldInput.js";
import { Icon as w } from "../Icon/Icon.js";
import { FieldHint as Y } from "../Field/FieldHint.js";
import { FieldError as G } from "../Field/FieldError.js";
const x = M.button`
  display: flex;
  height: 1rem;
  align-items: ${({ reverse: t }) => t ? "flex-end" : "flex-start"};
  transform: translateY(${({ reverse: t }) => t ? "-2px" : "2px"});
  cursor: ${({ disabled: t }) => t ? "not-allowed" : void 0};
  svg {
    display: block;
    height: ${4 / 16}rem;
    transform: ${({ reverse: t }) => t ? "rotateX(180deg)" : void 0};
  }
`, J = "", pr = _.forwardRef(({ size: t = "M", startAction: y, name: I, hint: F, error: V, label: c, labelAction: D, locale: A, id: C, onValueChange: k, value: d, step: a = 1, required: P = !1, disabled: m = !1, ...R }, $) => {
  const K = H(C), u = A || q(), s = b(new j(u, { style: "decimal" })), l = b(new E(u, { maximumFractionDigits: 20 })), [o, L] = z({
    prop(r) {
      const e = String(d);
      return isNaN(Number(e)) || e !== r && r !== "" ? r : l.current.format(Number(d));
    },
    defaultProp: J,
    onChange(r) {
      const e = s.current.parse(r ?? "");
      k(isNaN(e) ? void 0 : e);
    }
  }), i = (r) => {
    L(String(r));
  }, S = ({ target: { value: r } }) => {
    s.current.isValidPartialNumber(r) && i(r);
  }, f = () => {
    if (!o) {
      i(a);
      return;
    }
    const r = s.current.parse(o), e = isNaN(r) ? a : r + a;
    i(l.current.format(e));
  }, p = () => {
    if (!o) {
      i(-a);
      return;
    }
    const r = s.current.parse(o), e = isNaN(r) ? -a : r - a;
    i(l.current.format(e));
  }, v = (r) => {
    if (!m)
      switch (r.key) {
        case g.DOWN: {
          r.preventDefault(), p();
          break;
        }
        case g.UP: {
          r.preventDefault(), f();
          break;
        }
      }
  }, B = () => {
    if (o) {
      const r = s.current.parse(o), e = isNaN(r) ? "" : l.current.format(r);
      i(e);
    }
  };
  return n(O, { name: I, hint: F, error: V, id: K, required: P, children: h(T, { direction: "column", alignItems: "stretch", gap: 1, children: [c && n(W, { action: D, children: c }), n(X, { ref: $, startAction: y, disabled: m, type: "text", inputMode: "decimal", onChange: S, onKeyDown: v, onBlur: B, value: o, size: t, endAction: h(U, { children: [n(x, { disabled: m, "aria-hidden": !0, reverse: !0, onClick: f, tabIndex: -1, type: "button", "data-testid": "ArrowUp", children: n(w, { as: N, color: "neutral500" }) }), n(x, { disabled: m, "aria-hidden": !0, onClick: p, tabIndex: -1, type: "button", "data-testid": "ArrowDown", children: n(w, { as: N, color: "neutral500" }) })] }), ...R }), n(Y, {}), n(G, {})] }) });
});
export {
  pr as NumberInput
};
