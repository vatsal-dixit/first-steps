import { jsx as f, jsxs as Ae, Fragment as _e } from "react/jsx-runtime";
import * as l from "react";
import { composeEventHandlers as T } from "@radix-ui/primitive";
import { composeEventHandlers as An } from "@radix-ui/primitive";
import { useComposedRefs as A } from "@radix-ui/react-compose-refs";
import { createContextScope as nt, createContext as rt } from "@radix-ui/react-context";
import { DismissableLayer as lt } from "@radix-ui/react-dismissable-layer";
import { useFocusGuards as st } from "@radix-ui/react-focus-guards";
import { FocusScope as ct } from "@radix-ui/react-focus-scope";
import { useId as ne } from "@radix-ui/react-id";
import * as re from "@radix-ui/react-popper";
import { createPopperScope as it } from "@radix-ui/react-popper";
import { Portal as at } from "@radix-ui/react-portal";
import { Primitive as N } from "@radix-ui/react-primitive";
import { useControllableState as ie } from "@radix-ui/react-use-controllable-state";
import { useLayoutEffect as F } from "@radix-ui/react-use-layout-effect";
import { hideOthers as ut } from "aria-hidden";
import * as xe from "react-dom";
import { RemoveScroll as dt } from "react-remove-scroll";
import { Slot as Te } from "@radix-ui/react-slot";
import { clamp as Qe } from "@radix-ui/number";
import { createCollection as At } from "@radix-ui/react-collection";
import { useDirection as _t } from "@radix-ui/react-direction";
import { useCallbackRef as Mt } from "@radix-ui/react-use-callback-ref";
import { useCallbackRef as Mn } from "@radix-ui/react-use-callback-ref";
import { usePrevious as Ot } from "@radix-ui/react-use-previous";
import { VisuallyHidden as Dt } from "@radix-ui/react-visually-hidden";
let ye = /* @__PURE__ */ new Map();
function kt(r, s) {
  let e = r + (s ? Object.entries(s).sort((o, n) => o[0] < n[0] ? -1 : 1).join() : "");
  if (ye.has(e))
    return ye.get(e);
  let t = new Intl.Collator(r, s);
  return ye.set(e, t), t;
}
function Me(r, s) {
  let e = kt(r, {
    usage: "search",
    ...s
  });
  return {
    startsWith(t, o) {
      return o.length === 0 ? !0 : (t = t.normalize("NFC"), o = o.normalize("NFC"), e.compare(t.slice(0, o.length), o) === 0);
    },
    endsWith(t, o) {
      return o.length === 0 ? !0 : (t = t.normalize("NFC"), o = o.normalize("NFC"), e.compare(t.slice(-o.length), o) === 0);
    },
    contains(t, o) {
      if (o.length === 0)
        return !0;
      t = t.normalize("NFC"), o = o.normalize("NFC");
      let n = 0, i = o.length;
      for (; n + i <= t.length; n++) {
        let c = t.slice(n, n + i);
        if (e.compare(o, c) === 0)
          return !0;
      }
      return !1;
    }
  };
}
const Ft = (r) => {
  const s = l.useRef();
  return l.useEffect(() => {
    s.current = r;
  }), s.current;
};
function Lt(r) {
  const s = `${r}CollectionProvider`, [e, t] = nt(s), [o, n] = e(s, {
    collectionRef: { current: null },
    itemMap: /* @__PURE__ */ new Map(),
    listeners: /* @__PURE__ */ new Set()
  }), i = (u) => {
    const { scope: x, children: v } = u, C = l.useRef(null), b = l.useRef(/* @__PURE__ */ new Map()).current, g = l.useRef(/* @__PURE__ */ new Set()).current;
    return /* @__PURE__ */ f(o, { scope: x, itemMap: b, collectionRef: C, listeners: g, children: v });
  };
  i.displayName = s;
  const c = `${r}CollectionSlot`, a = l.forwardRef((u, x) => {
    const { scope: v, children: C } = u, b = n(c, v), g = A(x, b.collectionRef);
    return /* @__PURE__ */ f(Te, { ref: g, children: C });
  });
  a.displayName = c;
  const p = `${r}CollectionItemSlot`, d = "data-radix-collection-item", m = l.forwardRef((u, x) => {
    const { scope: v, children: C, ...b } = u, g = l.useRef(null), w = A(x, g), _ = n(p, v);
    return l.useEffect(() => {
      const V = Array.from(_.itemMap.values());
      return _.itemMap.set(g, { ref: g, ...b }), _.listeners.forEach((D) => D(Array.from(_.itemMap.values()), V)), () => {
        const D = Array.from(_.itemMap.values());
        _.itemMap.delete(g), _.listeners.forEach((E) => E(Array.from(_.itemMap.values()), D));
      };
    }), /* @__PURE__ */ f(Te, { [d]: "", ref: w, children: C });
  });
  m.displayName = p;
  function h(u) {
    const x = n(`${r}CollectionConsumer`, u), v = l.useCallback(() => {
      const b = x.collectionRef.current;
      if (!b)
        return [];
      const g = Array.from(b.querySelectorAll(`[${d}]`));
      return Array.from(x.itemMap.values()).sort(
        (V, D) => g.indexOf(V.ref.current) - g.indexOf(D.ref.current)
      );
    }, [x.collectionRef, x.itemMap]), C = l.useCallback(
      (b) => (x.listeners.add(b), () => x.listeners.delete(b)),
      [x.listeners]
    );
    return { getItems: v, subscribe: C };
  }
  return [
    { Provider: i, Slot: a, ItemSlot: m },
    h,
    t
  ];
}
const Bt = [" ", "Enter", "ArrowUp", "ArrowDown"], Ht = ["Enter"], et = (r) => !!(r.length === 1 && r.match(/\S| /)), ft = "Combobox", [ae, Ce] = Lt(ft), [$t, z] = rt(ft), Ut = ({ children: r }) => /* @__PURE__ */ f(re.Root, { children: /* @__PURE__ */ f(ae.Provider, { scope: void 0, children: r }) }), Kt = (r) => {
  const {
    allowCustomValue: s = !1,
    autocomplete: e = "none",
    children: t,
    open: o,
    defaultOpen: n,
    onOpenChange: i,
    value: c,
    defaultValue: a,
    onValueChange: p,
    disabled: d,
    required: m = !1,
    locale: h = "en-EN",
    onTextValueChange: u,
    textValue: x,
    defaultTextValue: v,
    filterValue: C,
    defaultFilterValue: b,
    onFilterValueChange: g
  } = r, [w, _] = l.useState(null), [V, D] = l.useState(null), [E, k] = l.useState(null), [H, G] = l.useState(null), [$ = !1, M] = ie({
    prop: o,
    defaultProp: n,
    onChange: i
  }), [L, B] = ie({
    prop: c,
    defaultProp: a,
    onChange: p
  }), [U, K] = ie({
    prop: x,
    defaultProp: v,
    onChange: u
  }), [q, X] = ie({
    prop: C,
    defaultProp: b,
    onChange: g
  }), W = ne(), de = l.useCallback(
    (le, se) => {
      const fe = se.map((I) => I.ref.current), [Z, ...ce] = fe, [Q] = ce.slice(-1), S = H;
      for (const I of le) {
        if (I === S)
          return;
        if (I?.scrollIntoView({ block: "nearest" }), I === Z && V && (V.scrollTop = 0), I === Q && V && (V.scrollTop = V.scrollHeight), G(I), e === "both") {
          const O = se.find((y) => y.ref.current === I);
          O && K(O.textValue);
        }
        if (I !== S)
          return;
      }
    },
    [e, K, V, H]
  );
  return l.useEffect(() => {
    e !== "both" && G(null);
  }, [U, e]), l.useEffect(() => {
    if (E && w)
      return ut([E, w]);
  }, [E, w]), /* @__PURE__ */ f(Ut, { children: /* @__PURE__ */ f(
    $t,
    {
      allowCustomValue: s,
      autocomplete: e,
      required: m,
      trigger: w,
      onTriggerChange: _,
      contentId: W,
      value: L,
      onValueChange: B,
      open: $,
      onOpenChange: M,
      disabled: d,
      locale: h,
      focusFirst: de,
      textValue: U,
      onTextValueChange: K,
      onViewportChange: D,
      onContentChange: k,
      visuallyFocussedItem: H,
      filterValue: q,
      onFilterValueChange: X,
      onVisuallyFocussedItemChange: G,
      children: t
    }
  ) });
}, Wt = "ComboboxTrigger", zt = l.forwardRef((r, s) => {
  const { ...e } = r, t = z(Wt), o = () => {
    t.disabled || t.onOpenChange(!0);
  };
  return /* @__PURE__ */ f(re.Anchor, { asChild: !0, children: /* @__PURE__ */ f(
    ct,
    {
      asChild: !0,
      trapped: t.open,
      onMountAutoFocus: (n) => {
        n.preventDefault();
      },
      onUnmountAutoFocus: (n) => {
        t.trigger?.focus({ preventScroll: !0 }), document.getSelection()?.empty(), n.preventDefault();
      },
      children: /* @__PURE__ */ f(
        "div",
        {
          ref: s,
          "data-disabled": t.disabled ? "" : void 0,
          ...e,
          onClick: T(e.onClick, () => {
            t.trigger?.focus();
          }),
          onPointerDown: T(e.onPointerDown, (n) => {
            const i = n.target;
            i.hasPointerCapture(n.pointerId) && i.releasePointerCapture(n.pointerId), (i.closest("button") ?? i.closest("div")) === n.currentTarget && n.button === 0 && n.ctrlKey === !1 && (o(), t.trigger?.focus());
          })
        }
      )
    }
  ) });
}), pt = "ComboboxInput", Gt = l.forwardRef((r, s) => {
  const e = z(pt), t = l.useRef(null), { getItems: o } = Ce(void 0), { startsWith: n } = Me(e.locale, { sensitivity: "base" }), i = e.disabled, c = A(t, s, e.onTriggerChange), a = () => {
    i || e.onOpenChange(!0);
  }, p = Ft(e.filterValue);
  return F(() => {
    const d = setTimeout(() => {
      if (e.textValue === "" || e.textValue === void 0 || e.filterValue === "" || e.filterValue === void 0)
        return;
      const m = o().find(
        (u) => u.type === "option" && n(u.textValue, e.textValue)
      ), h = So(p ?? "", e.filterValue);
      m && !e.visuallyFocussedItem && h === e.filterValue.length && t.current?.setSelectionRange(e.filterValue.length, e.textValue.length);
    });
    return () => clearTimeout(d);
  }, [e.textValue, e.filterValue, n, e.visuallyFocussedItem, o, p]), /* @__PURE__ */ f(
    "input",
    {
      type: "text",
      role: "combobox",
      "aria-controls": e.contentId,
      "aria-expanded": e.open,
      "aria-required": e.required,
      "aria-autocomplete": e.autocomplete,
      "data-state": e.open ? "open" : "closed",
      "aria-disabled": i,
      "aria-activedescendant": e.visuallyFocussedItem?.id,
      disabled: i,
      "data-disabled": i ? "" : void 0,
      "data-placeholder": e.textValue === void 0 ? "" : void 0,
      value: e.textValue ?? "",
      ...r,
      ref: c,
      onKeyDown: T(r.onKeyDown, (d) => {
        if (["ArrowUp", "ArrowDown", "Home", "End"].includes(d.key))
          e.open || a(), setTimeout(() => {
            let h = o().filter((u) => !u.disabled && u.isVisible).map((u) => u.ref.current);
            if (["ArrowUp", "End"].includes(d.key) && (h = h.slice().reverse()), ["ArrowUp", "ArrowDown"].includes(d.key)) {
              const u = e.visuallyFocussedItem ?? d.target;
              let x = h.indexOf(u);
              x === h.length - 1 && (x = -1), h = h.slice(x + 1);
            }
            if (["ArrowDown"].includes(d.key) && e.autocomplete === "both" && h.length > 1) {
              const [u, ...x] = h, v = o().find((C) => C.ref.current === u).textValue;
              e.textValue === v && (h = x);
            }
            e.focusFirst(h, o());
          }), d.preventDefault();
        else if (["Tab"].includes(d.key) && e.open)
          d.preventDefault();
        else if (["Escape"].includes(d.key))
          e.open ? e.onOpenChange(!1) : (e.onValueChange(void 0), e.onTextValueChange("")), d.preventDefault();
        else if (Ht.includes(d.key)) {
          if (e.visuallyFocussedItem) {
            const m = o().find((h) => h.ref.current === e.visuallyFocussedItem);
            m && (e.onValueChange(m.value), e.onTextValueChange(m.textValue), e.autocomplete === "both" && e.onFilterValueChange(m.textValue), m.ref.current?.click());
          } else {
            const m = o().find(
              (h) => h.type === "option" && !h.disabled && h.textValue === e.textValue
            );
            m && (e.onValueChange(m.value), e.onTextValueChange(m.textValue), e.autocomplete === "both" && e.onFilterValueChange(m.textValue), m.ref.current?.click());
          }
          e.onOpenChange(!1), d.preventDefault();
        } else
          e.onVisuallyFocussedItemChange(null);
      }),
      onChange: T(r.onChange, (d) => {
        e.onTextValueChange(d.currentTarget.value), e.autocomplete === "both" && e.onFilterValueChange(d.currentTarget.value);
      }),
      onKeyUp: T(r.onKeyUp, (d) => {
        !e.open && (et(d.key) || ["Backspace"].includes(d.key)) && a(), setTimeout(() => {
          if (e.autocomplete === "both" && et(d.key) && e.filterValue !== void 0) {
            const m = e.filterValue, h = o().find((u) => n(u.textValue, m));
            h && e.onTextValueChange(h.textValue);
          }
        });
      }),
      onBlur: T(r.onBlur, () => {
        e.onVisuallyFocussedItemChange(null);
        const [d] = o().filter(
          (h) => h.textValue === e.textValue && h.type === "option"
        );
        if (e.allowCustomValue) {
          d && (e.onValueChange(d.value), e.autocomplete === "both" && e.onFilterValueChange(d.textValue));
          return;
        }
        const [m] = o().filter((h) => h.value === e.value && h.type === "option");
        d ? e.onValueChange(d.value) : m && e.textValue !== "" ? (e.onTextValueChange(m.textValue), e.autocomplete === "both" && e.onFilterValueChange(m.textValue)) : (e.onValueChange(void 0), e.onTextValueChange(""));
      })
    }
  );
}), jt = l.forwardRef((r, s) => {
  const { children: e, ...t } = r, o = z(pt), n = o.disabled, i = () => {
    n || (o.onOpenChange(!0), o.trigger?.focus());
  };
  return /* @__PURE__ */ f(
    N.button,
    {
      "aria-hidden": !0,
      type: "button",
      "aria-disabled": n,
      "aria-controls": o.contentId,
      "aria-expanded": o.open,
      disabled: n,
      "data-disabled": n ? "" : void 0,
      ...t,
      tabIndex: -1,
      ref: s,
      onClick: T(t.onClick, () => {
        o.trigger?.focus();
      }),
      onPointerDown: T(t.onPointerDown, (c) => {
        c.button === 0 && c.ctrlKey === !1 && (i(), c.preventDefault());
      }),
      onKeyDown: T(t.onKeyDown, (c) => {
        Bt.includes(c.key) && (i(), c.preventDefault());
      }),
      children: e || "▼"
    }
  );
}), Yt = "ComboboxPortal", mt = (r) => /* @__PURE__ */ f(at, { asChild: !0, ...r });
mt.displayName = Yt;
const ht = "ComboboxContent", qt = l.forwardRef((r, s) => {
  const e = z(ht), [t, o] = l.useState();
  if (F(() => {
    o(new DocumentFragment());
  }, []), !e.open) {
    const n = t;
    return n ? xe.createPortal(
      /* @__PURE__ */ f(ae.Slot, { scope: void 0, children: /* @__PURE__ */ f("div", { children: r.children }) }),
      n
    ) : null;
  }
  return /* @__PURE__ */ f(Zt, { ...r, ref: s });
}), Xt = 10, Zt = l.forwardRef(
  (r, s) => {
    const { onEscapeKeyDown: e, onPointerDownOutside: t, ...o } = r, n = z(ht), i = A(s, (a) => n.onContentChange(a)), { onOpenChange: c } = n;
    return st(), l.useEffect(() => {
      const a = () => {
        c(!1);
      };
      return window.addEventListener("blur", a), window.addEventListener("resize", a), () => {
        window.removeEventListener("blur", a), window.removeEventListener("resize", a);
      };
    }, [c]), /* @__PURE__ */ f(dt, { allowPinchZoom: !0, children: /* @__PURE__ */ f(
      lt,
      {
        asChild: !0,
        onEscapeKeyDown: e,
        onPointerDownOutside: t,
        onFocusOutside: (a) => {
          a.preventDefault();
        },
        onDismiss: () => {
          n.onOpenChange(!1), n.trigger?.focus({ preventScroll: !0 });
        },
        children: /* @__PURE__ */ f(
          Jt,
          {
            role: "listbox",
            id: n.contentId,
            "data-state": n.open ? "open" : "closed",
            onContextMenu: (a) => a.preventDefault(),
            ...o,
            ref: i,
            style: {
              // flex layout so we can place the scroll buttons properly
              display: "flex",
              flexDirection: "column",
              // reset the outline by default as the content MAY get focused
              outline: "none",
              ...o.style
            }
          }
        )
      }
    ) });
  }
), Jt = l.forwardRef(
  (r, s) => {
    const { align: e = "start", collisionPadding: t = Xt, ...o } = r;
    return /* @__PURE__ */ f(
      re.Content,
      {
        ...o,
        ref: s,
        align: e,
        collisionPadding: t,
        style: {
          // Ensure border-box for floating-ui calculations
          boxSizing: "border-box",
          ...o.style,
          "--radix-combobox-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-combobox-content-available-width": "var(--radix-popper-available-width)",
          "--radix-combobox-content-available-height": "var(--radix-popper-available-height)",
          "--radix-combobox-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-combobox-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    );
  }
), Qt = "ComboboxViewport", eo = l.forwardRef((r, s) => {
  const e = z(Qt), t = A(s, e.onViewportChange);
  return /* @__PURE__ */ Ae(_e, { children: [
    /* @__PURE__ */ f(
      "style",
      {
        dangerouslySetInnerHTML: {
          __html: "[data-radix-combobox-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-combobox-viewport]::-webkit-scrollbar{display:none}"
        }
      }
    ),
    /* @__PURE__ */ f(ae.Slot, { scope: void 0, children: /* @__PURE__ */ f(
      N.div,
      {
        "data-radix-combobox-viewport": "",
        role: "presentation",
        ...r,
        ref: t,
        style: {
          // we use position: 'relative' here on the `viewport` so that when we call
          // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
          // (independent of the scrollUpButton).
          position: "relative",
          flex: 1,
          overflow: "auto",
          ...r.style
        }
      }
    ) })
  ] });
}), Oe = "ComboboxItem", [tt, De] = rt(Oe), gt = l.forwardRef((r, s) => {
  const { value: e, disabled: t = !1, textValue: o } = r, [n, i] = l.useState();
  F(() => {
    i(new DocumentFragment());
  }, []);
  const { onTextValueChange: c, textValue: a, ...p } = z(Oe), d = ne(), [m, h] = l.useState(o ?? ""), u = p.value === e, { startsWith: x } = Me(p.locale, { sensitivity: "base" }), v = l.useCallback((C) => {
    h((b) => b || (C?.textContent ?? "").trim());
  }, []);
  return l.useEffect(() => {
    u && a === void 0 && m !== "" && c(m);
  }, [m, u, a, c]), p.autocomplete === "both" && m && p.filterValue && !x(m, p.filterValue) || p.autocomplete === "list" && m && a && !x(m, a) ? n ? xe.createPortal(
    /* @__PURE__ */ f(
      tt,
      {
        textId: d,
        onTextValueChange: v,
        isSelected: u,
        textValue: m,
        children: /* @__PURE__ */ f(
          ae.ItemSlot,
          {
            scope: void 0,
            value: e,
            textValue: m,
            disabled: t,
            type: "option",
            isVisible: !1,
            children: /* @__PURE__ */ f(ot, { ref: s, ...r })
          }
        )
      }
    ),
    n
  ) : null : /* @__PURE__ */ f(
    tt,
    {
      textId: d,
      onTextValueChange: v,
      isSelected: u,
      textValue: m,
      children: /* @__PURE__ */ f(
        ae.ItemSlot,
        {
          scope: void 0,
          value: e,
          textValue: m,
          disabled: t,
          type: "option",
          isVisible: !0,
          children: /* @__PURE__ */ f(ot, { ref: s, ...r })
        }
      )
    }
  );
}), to = "ComboboxItemImpl", ot = l.forwardRef((r, s) => {
  const { value: e, disabled: t = !1, ...o } = r, n = l.useRef(null), i = A(s, n), { getItems: c } = Ce(void 0), { onTextValueChange: a, visuallyFocussedItem: p, ...d } = z(Oe), { isSelected: m, textValue: h, textId: u } = De(to), x = () => {
    t || (d.onValueChange(e), a(h), d.onOpenChange(!1), d.autocomplete === "both" && d.onFilterValueChange(h), d.trigger?.focus({ preventScroll: !0 }));
  }, v = l.useMemo(() => p === c().find((b) => b.ref.current === n.current)?.ref.current, [c, p]), C = ne();
  return /* @__PURE__ */ f(
    N.div,
    {
      role: "option",
      "aria-labelledby": u,
      "data-highlighted": v ? "" : void 0,
      "aria-selected": m && v,
      "data-state": m ? "checked" : "unchecked",
      "aria-disabled": t || void 0,
      "data-disabled": t ? "" : void 0,
      tabIndex: t ? void 0 : -1,
      ...o,
      id: C,
      ref: i,
      onPointerUp: T(o.onPointerUp, x)
    }
  );
}), oo = "ComboboxItemText", no = l.forwardRef((r, s) => {
  const { className: e, style: t, ...o } = r, n = De(oo), i = A(s, n.onTextValueChange);
  return /* @__PURE__ */ f(N.span, { id: n.textId, ...o, ref: i });
}), ro = "ComboboxItemIndicator", lo = l.forwardRef((r, s) => {
  const { isSelected: e } = De(ro);
  return e ? /* @__PURE__ */ f(N.span, { "aria-hidden": !0, ...r, ref: s }) : null;
}), xt = "ComboboxNoValueFound", so = l.forwardRef((r, s) => {
  const { textValue: e = "", filterValue: t = "", locale: o, autocomplete: n } = z(xt), [i, c] = l.useState([]), { subscribe: a } = Ce(void 0), { startsWith: p } = Me(o, { sensitivity: "base" });
  return l.useEffect(() => {
    const d = a((m) => {
      c(m);
    });
    return () => {
      d();
    };
  }, [a]), i.length === 0 || n === "list" && i.some((d) => p(d.textValue, e)) || n === "both" && i.some((d) => p(d.textValue, t)) ? null : /* @__PURE__ */ f(N.div, { ...r, ref: s });
}), co = l.forwardRef((r, s) => {
  const { disabled: e = !1, ...t } = r, o = z(xt), { textValue: n, visuallyFocussedItem: i } = o, { getItems: c, subscribe: a } = Ce(void 0), p = l.useRef(null), [d, m] = l.useState(!1), h = A(s, p), u = l.useMemo(() => i === c().find((C) => C.ref.current === p.current)?.ref.current, [c, i]), x = ne(), v = () => {
    !e && n && (o.onValueChange(n), o.onTextValueChange(n), o.onOpenChange(!1), o.autocomplete === "both" && o.onFilterValueChange(n), o.trigger?.focus({ preventScroll: !0 }));
  };
  return F(() => {
    const C = a((b) => {
      m(!b.some((g) => g.textValue === n && g.type !== "create"));
    });
    return c().length === 0 && m(!0), () => {
      C();
    };
  }, [n, a, c]), !n || !d ? null : /* @__PURE__ */ f(
    ae.ItemSlot,
    {
      scope: void 0,
      value: n ?? "",
      textValue: n ?? "",
      disabled: e,
      isVisible: !0,
      type: "create",
      children: /* @__PURE__ */ f(
        N.div,
        {
          role: "option",
          tabIndex: e ? void 0 : -1,
          "aria-disabled": e || void 0,
          "data-disabled": e ? "" : void 0,
          "data-highlighted": u ? "" : void 0,
          ...t,
          id: x,
          ref: h,
          onPointerUp: T(t.onPointerUp, v)
        }
      )
    }
  );
}), io = Kt, ao = zt, uo = Gt, fo = jt, po = mt, mo = qt, ho = eo, go = gt, xo = no, Co = lo, vo = so, bo = co;
function So(r, s) {
  const e = Math.min(r.length, s.length);
  for (let t = 0; t < e; t++)
    if (r[t] !== s[t])
      return t;
  return e;
}
const Pn = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ComboboxItem: gt,
  Content: mo,
  CreateItem: bo,
  Icon: fo,
  Item: go,
  ItemIndicator: Co,
  ItemText: xo,
  NoValueFound: vo,
  Portal: po,
  Root: io,
  TextInput: uo,
  Trigger: ao,
  Viewport: ho
}, Symbol.toStringTag, { value: "Module" })), wo = [" ", "Enter", "ArrowUp", "ArrowDown"], Io = [" ", "Enter"], me = "Select", [ve, he, yo] = At(me), [ue, To] = nt(me, [
  yo,
  it
]), be = it(), [Vo, Y] = ue(me), [Po, Eo] = ue(me), ke = (r) => {
  const {
    __scopeSelect: s,
    children: e,
    open: t,
    defaultOpen: o,
    onOpenChange: n,
    value: i,
    defaultValue: c,
    onValueChange: a,
    dir: p,
    // name,
    // autoComplete,
    disabled: d,
    required: m,
    multi: h = !1
  } = r, u = be(s), [x, v] = l.useState(null), [C, b] = l.useState(null), [g, w] = l.useState(!1), _ = _t(p), [V = !1, D] = ie({
    prop: t,
    defaultProp: o,
    onChange: n
  }), [E, k] = ie({
    prop: i,
    defaultProp: c,
    onChange(M) {
      a && (Array.isArray(M), a(M));
    }
  }), H = l.useRef(null), [G, $] = l.useState(/* @__PURE__ */ new Set());
  return /* @__PURE__ */ f(re.Root, { ...u, children: /* @__PURE__ */ f(
    Vo,
    {
      required: m,
      scope: s,
      trigger: x,
      onTriggerChange: v,
      valueNode: C,
      onValueNodeChange: b,
      valueNodeHasChildren: g,
      onValueNodeHasChildrenChange: w,
      contentId: ne(),
      value: E,
      onValueChange: k,
      open: V,
      onOpenChange: D,
      dir: _,
      triggerPointerDownPosRef: H,
      disabled: d,
      multi: h,
      children: /* @__PURE__ */ f(ve.Provider, { scope: s, children: /* @__PURE__ */ f(
        Po,
        {
          scope: r.__scopeSelect,
          onNativeOptionAdd: l.useCallback((M) => {
            $((L) => new Set(L).add(M));
          }, []),
          onNativeOptionRemove: l.useCallback((M) => {
            $((L) => {
              const B = new Set(L);
              return B.delete(M), B;
            });
          }, []),
          children: e
        }
      ) })
    }
  ) });
};
ke.displayName = me;
const Ct = "SelectTrigger", Fe = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, ...t } = r, o = be(e), n = Y(Ct, e), i = n.disabled, c = A(s, n.onTriggerChange), a = he(e), [p, d, m] = Et((u) => {
      const x = a().filter((b) => !b.disabled), v = x.find((b) => b.value === n.value), C = Rt(x, u, v);
      if (C !== void 0 && !Array.isArray(C.value)) {
        const b = n.multi ? [C.value] : C.value;
        n.onValueChange(b);
      }
    }), h = () => {
      i || (n.onOpenChange(!0), m());
    };
    return /* @__PURE__ */ f(re.Anchor, { asChild: !0, ...o, children: /* @__PURE__ */ f(
      N.div,
      {
        role: "combobox",
        "aria-controls": n.contentId,
        "aria-expanded": n.open,
        "aria-required": n.required,
        "aria-autocomplete": "none",
        dir: n.dir,
        "data-state": n.open ? "open" : "closed",
        "data-disabled": i ? "" : void 0,
        "data-placeholder": n.value === void 0 ? "" : void 0,
        tabIndex: i ? void 0 : 0,
        ...t,
        ref: c,
        onClick: T(t.onClick, (u) => {
          u.currentTarget.focus();
        }),
        onPointerDown: T(t.onPointerDown, (u) => {
          const x = u.target;
          x.hasPointerCapture(u.pointerId) && x.releasePointerCapture(u.pointerId), (x.closest("button") ?? x.closest("div")) === u.currentTarget && u.button === 0 && u.ctrlKey === !1 && (h(), n.triggerPointerDownPosRef.current = {
            x: Math.round(u.pageX),
            y: Math.round(u.pageY)
          }, u.preventDefault());
        }),
        onKeyDown: T(t.onKeyDown, (u) => {
          const x = p.current !== "", v = u.ctrlKey || u.altKey || u.metaKey, C = u.target;
          (C.closest("button") ?? C.closest("div")) === u.currentTarget && (!v && u.key.length === 1 && d(u.key), !(x && u.key === " ") && wo.includes(u.key) && (h(), u.preventDefault()));
        })
      }
    ) });
  }
);
Fe.displayName = Ct;
const vt = "SelectValue", Le = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, children: t, placeholder: o, ...n } = r, i = Y(vt, e), { onValueNodeHasChildrenChange: c } = i, a = t !== void 0, p = A(s, i.onValueNodeChange), [d, m] = l.useState([]), h = he(e);
    F(() => {
      c(a);
    }, [c, a]), l.useLayoutEffect(() => {
      if (Array.isArray(i.value) && d.length !== i.value.length) {
        const x = setTimeout(() => {
          const v = h().filter(
            (C) => Array.isArray(C.value) ? !1 : i.value?.includes(C.value)
          );
          m(v);
        });
        return () => {
          clearTimeout(x);
        };
      }
    }, [i.value, h, d]);
    let u;
    if ((i.value === void 0 || i.value.length === 0) && o !== void 0)
      u = /* @__PURE__ */ f("span", { children: o });
    else if (typeof t == "function")
      if (Array.isArray(i.value)) {
        const x = i.value.map((v) => {
          const C = d.find((b) => b.value === v);
          return C ? t({ value: v, textValue: C?.textValue }) : null;
        });
        u = x.every((v) => v === null) ? o : x;
      } else
        u = t(i.value);
    else
      u = t;
    return /* @__PURE__ */ f(N.span, { ...n, ref: p, children: u || null });
  }
);
Le.displayName = vt;
const Ro = "SelectIcon", Be = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, children: t, ...o } = r;
    return /* @__PURE__ */ f(N.span, { "aria-hidden": !0, ...o, ref: s, children: t || "▼" });
  }
);
Be.displayName = Ro;
const No = "SelectPortal", He = (r) => /* @__PURE__ */ f(at, { asChild: !0, ...r });
He.displayName = No;
const oe = "SelectContent", $e = l.forwardRef(
  (r, s) => {
    const e = Y(oe, r.__scopeSelect), [t, o] = l.useState();
    if (F(() => {
      o(new DocumentFragment());
    }, []), !e.open) {
      const n = t;
      return n ? xe.createPortal(
        /* @__PURE__ */ f(bt, { scope: r.__scopeSelect, children: /* @__PURE__ */ f(ve.Slot, { scope: r.__scopeSelect, children: /* @__PURE__ */ f("div", { children: r.children }) }) }),
        n
      ) : null;
    }
    return /* @__PURE__ */ f(St, { ...r, ref: s });
  }
);
$e.displayName = oe;
const j = 10, [bt, J] = ue(oe), Ao = "SelectContentImpl", St = l.forwardRef(
  (r, s) => {
    const {
      __scopeSelect: e,
      position: t = "item-aligned",
      onCloseAutoFocus: o,
      onEscapeKeyDown: n,
      onPointerDownOutside: i,
      //
      // PopperContent props
      side: c,
      sideOffset: a,
      align: p,
      alignOffset: d,
      arrowPadding: m,
      collisionBoundary: h,
      collisionPadding: u,
      sticky: x,
      hideWhenDetached: v,
      avoidCollisions: C,
      //
      ...b
    } = r, g = Y(oe, e), [w, _] = l.useState(null), [V, D] = l.useState(null), E = A(s, (S) => _(S)), [k, H] = l.useState(null), [G, $] = l.useState(null), M = he(e), [L, B] = l.useState(!1), U = l.useRef(!1);
    l.useEffect(() => {
      if (w)
        return ut(w);
    }, [w]), st();
    const K = l.useCallback(
      (S) => {
        const [I, ...O] = M().map((R) => R.ref.current), [y] = O.slice(-1), P = document.activeElement;
        for (const R of S)
          if (R === P || (R?.scrollIntoView({ block: "nearest" }), R === I && V && (V.scrollTop = 0), R === y && V && (V.scrollTop = V.scrollHeight), R?.focus(), document.activeElement !== P))
            return;
      },
      [M, V]
    ), q = l.useCallback(
      () => K([k, w]),
      [K, k, w]
    );
    l.useEffect(() => {
      L && q();
    }, [L, q]);
    const { onOpenChange: X, triggerPointerDownPosRef: W } = g;
    l.useEffect(() => {
      if (w) {
        let S = { x: 0, y: 0 };
        const I = (y) => {
          S = {
            x: Math.abs(Math.round(y.pageX) - (W.current?.x ?? 0)),
            y: Math.abs(Math.round(y.pageY) - (W.current?.y ?? 0))
          };
        }, O = (y) => {
          S.x <= 10 && S.y <= 10 ? y.preventDefault() : w.contains(y.target) || X(!1), document.removeEventListener("pointermove", I), W.current = null;
        };
        return W.current !== null && (document.addEventListener("pointermove", I), document.addEventListener("pointerup", O, { capture: !0, once: !0 })), () => {
          document.removeEventListener("pointermove", I), document.removeEventListener("pointerup", O, { capture: !0 });
        };
      }
    }, [w, X, W]), l.useEffect(() => {
      const S = () => X(!1);
      return window.addEventListener("blur", S), window.addEventListener("resize", S), () => {
        window.removeEventListener("blur", S), window.removeEventListener("resize", S);
      };
    }, [X]);
    const [de, le] = Et((S) => {
      const I = M().filter((P) => !P.disabled), O = I.find((P) => P.ref.current === document.activeElement), y = Rt(I, S, O);
      y && setTimeout(() => y.ref.current.focus());
    }), se = l.useCallback(
      (S, I, O) => {
        const y = !U.current && !O;
        (g.value !== void 0 && g.value === I || y) && (H(S), y && (U.current = !0));
      },
      [g.value]
    ), fe = l.useCallback(() => w?.focus(), [w]), Z = l.useCallback(
      (S, I, O) => {
        const y = !U.current && !O;
        (g.value !== void 0 && (Array.isArray(I) ? I.every((R) => g.value?.includes(R)) : g.value === I) || y) && $(S);
      },
      [g.value]
    ), ce = t === "popper" ? Ve : wt, Q = ce === Ve ? {
      side: c,
      sideOffset: a,
      align: p,
      alignOffset: d,
      arrowPadding: m,
      collisionBoundary: h,
      collisionPadding: u,
      sticky: x,
      hideWhenDetached: v,
      avoidCollisions: C
    } : {};
    return /* @__PURE__ */ f(
      bt,
      {
        scope: e,
        content: w,
        viewport: V,
        onViewportChange: D,
        itemRefCallback: se,
        selectedItem: k,
        onItemLeave: fe,
        itemTextRefCallback: Z,
        focusSelectedItem: q,
        selectedItemText: G,
        position: t,
        isPositioned: L,
        searchRef: de,
        children: /* @__PURE__ */ f(dt, { as: Te, allowPinchZoom: !0, children: /* @__PURE__ */ f(
          ct,
          {
            asChild: !0,
            trapped: g.open,
            onMountAutoFocus: (S) => {
              S.preventDefault();
            },
            onUnmountAutoFocus: T(o, (S) => {
              g.trigger?.focus({ preventScroll: !0 }), document.getSelection()?.empty(), S.preventDefault();
            }),
            children: /* @__PURE__ */ f(
              lt,
              {
                asChild: !0,
                disableOutsidePointerEvents: !0,
                onEscapeKeyDown: n,
                onPointerDownOutside: i,
                onFocusOutside: (S) => S.preventDefault(),
                onDismiss: () => g.onOpenChange(!1),
                children: /* @__PURE__ */ f(
                  ce,
                  {
                    role: "listbox",
                    id: g.contentId,
                    "data-state": g.open ? "open" : "closed",
                    "aria-multiselectable": g.multi ? "true" : void 0,
                    dir: g.dir,
                    onContextMenu: (S) => S.preventDefault(),
                    ...b,
                    ...Q,
                    onPlaced: () => B(!0),
                    ref: E,
                    style: {
                      // flex layout so we can place the scroll buttons properly
                      display: "flex",
                      flexDirection: "column",
                      // reset the outline by default as the content MAY get focused
                      outline: "none",
                      ...b.style
                    },
                    onKeyDown: T(b.onKeyDown, (S) => {
                      const I = S.ctrlKey || S.altKey || S.metaKey;
                      if (S.key === "Tab" && S.preventDefault(), !I && S.key.length === 1 && le(S.key), ["ArrowUp", "ArrowDown", "Home", "End"].includes(S.key)) {
                        let y = M().filter((P) => !P.disabled).map((P) => P.ref.current);
                        if (["ArrowUp", "End"].includes(S.key) && (y = y.slice().reverse()), ["ArrowUp", "ArrowDown"].includes(S.key)) {
                          const P = S.target, R = y.indexOf(P);
                          y = y.slice(R + 1);
                        }
                        setTimeout(() => K(y)), S.preventDefault();
                      }
                    })
                  }
                )
              }
            )
          }
        ) })
      }
    );
  }
);
St.displayName = Ao;
const _o = "SelectItemAlignedPosition", wt = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, onPlaced: t, ...o } = r, n = Y(oe, e), i = J(oe, e), [c, a] = l.useState(null), [p, d] = l.useState(null), m = A(s, (E) => d(E)), h = he(e), u = l.useRef(!1), x = l.useRef(!0), { viewport: v, selectedItem: C, selectedItemText: b, focusSelectedItem: g } = i, w = l.useCallback(() => {
      if (n.trigger && n.valueNode && c && p && v && C && b) {
        const E = n.trigger.getBoundingClientRect(), k = p.getBoundingClientRect(), H = n.valueNode.getBoundingClientRect(), G = b.getBoundingClientRect();
        if (n.dir !== "rtl") {
          const P = G.left - k.left, R = H.left - P, ee = E.left - R, te = E.width + ee, Se = Math.max(te, k.width), we = window.innerWidth - j, Ie = Qe(R, [j, we - Se]);
          c.style.minWidth = `${te}px`, c.style.left = `${Ie}px`;
        } else {
          const P = k.right - G.right, R = window.innerWidth - H.right - P, ee = window.innerWidth - E.right - R, te = E.width + ee, Se = Math.max(te, k.width), we = window.innerWidth - j, Ie = Qe(R, [j, we - Se]);
          c.style.minWidth = `${te}px`, c.style.right = `${Ie}px`;
        }
        const $ = h(), M = window.innerHeight - j * 2, L = v.scrollHeight, B = window.getComputedStyle(p), U = parseInt(B.borderTopWidth, 10), K = parseInt(B.paddingTop, 10), q = parseInt(B.borderBottomWidth, 10), X = parseInt(B.paddingBottom, 10), W = U + K + L + X + q, de = Math.min(C.offsetHeight * 5, W), le = window.getComputedStyle(v), se = parseInt(le.paddingTop, 10), fe = parseInt(le.paddingBottom, 10), Z = E.top + E.height / 2 - j, ce = M - Z, Q = C.offsetHeight / 2, S = C.offsetTop + Q, I = U + K + S, O = W - I;
        if (I <= Z) {
          const P = C === $[$.length - 1].ref.current;
          c.style.bottom = "0px";
          const R = p.clientHeight - v.offsetTop - v.offsetHeight, ee = Math.max(
            ce,
            Q + // viewport might have padding bottom, include it to avoid a scrollable viewport
            (P ? fe : 0) + R + q
          ), te = I + ee;
          c.style.height = `${te}px`;
        } else {
          const P = C === $[0].ref.current;
          c.style.top = "0px";
          const ee = Math.max(
            Z,
            U + v.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport
            (P ? se : 0) + Q
          ) + O;
          c.style.height = `${ee}px`, v.scrollTop = I - Z + v.offsetTop;
        }
        c.style.margin = `${j}px 0`, c.style.minHeight = `${de}px`, c.style.maxHeight = `${M}px`, t?.(), requestAnimationFrame(() => u.current = !0);
      }
    }, [
      h,
      n.trigger,
      n.valueNode,
      c,
      p,
      v,
      C,
      b,
      n.dir,
      t
    ]);
    F(() => w(), [w]);
    const [_, V] = l.useState();
    F(() => {
      p && V(window.getComputedStyle(p).zIndex);
    }, [p]);
    const D = l.useCallback(
      (E) => {
        E && x.current === !0 && (w(), g?.(), x.current = !1);
      },
      [w, g]
    );
    return /* @__PURE__ */ f(
      Oo,
      {
        scope: e,
        contentWrapper: c,
        shouldExpandOnScrollRef: u,
        onScrollButtonChange: D,
        children: /* @__PURE__ */ f(
          "div",
          {
            ref: a,
            style: {
              display: "flex",
              flexDirection: "column",
              position: "fixed",
              zIndex: _
            },
            children: /* @__PURE__ */ f(
              N.div,
              {
                ...o,
                ref: m,
                style: {
                  // When we get the height of the content, it includes borders. If we were to set
                  // the height without having `boxSizing: 'border-box'` it would be too big.
                  boxSizing: "border-box",
                  // We need to ensure the content doesn't get taller than the wrapper
                  maxHeight: "100%",
                  ...o.style
                }
              }
            )
          }
        )
      }
    );
  }
);
wt.displayName = _o;
const Mo = "SelectPopperPosition", Ve = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, align: t = "start", collisionPadding: o = j, ...n } = r, i = be(e);
    return /* @__PURE__ */ f(
      re.Content,
      {
        ...i,
        ...n,
        ref: s,
        align: t,
        collisionPadding: o,
        style: {
          // Ensure border-box for floating-ui calculations
          boxSizing: "border-box",
          ...n.style,
          "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-select-content-available-width": "var(--radix-popper-available-width)",
          "--radix-select-content-available-height": "var(--radix-popper-available-height)",
          "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    );
  }
);
Ve.displayName = Mo;
const [Oo, Ue] = ue(
  oe,
  {}
), Pe = "SelectViewport", Ke = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, ...t } = r, o = J(Pe, e), n = Ue(Pe, e), i = A(s, o.onViewportChange), c = l.useRef(0);
    return /* @__PURE__ */ Ae(_e, { children: [
      /* @__PURE__ */ f(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: "[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}"
          }
        }
      ),
      /* @__PURE__ */ f(ve.Slot, { scope: e, children: /* @__PURE__ */ f(
        N.div,
        {
          "data-radix-select-viewport": "",
          role: "presentation",
          ...t,
          ref: i,
          style: {
            // we use position: 'relative' here on the `viewport` so that when we call
            // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
            // (independent of the scrollUpButton).
            position: "relative",
            flex: 1,
            overflow: "auto",
            ...t.style
          },
          onScroll: T(t.onScroll, (a) => {
            const p = a.currentTarget, { contentWrapper: d, shouldExpandOnScrollRef: m } = n;
            if (m?.current && d) {
              const h = Math.abs(c.current - p.scrollTop);
              if (h > 0) {
                const u = window.innerHeight - j * 2, x = parseFloat(d.style.minHeight), v = parseFloat(d.style.height), C = Math.max(x, v);
                if (C < u) {
                  const b = C + h, g = Math.min(u, b), w = b - g;
                  d.style.height = `${g}px`, d.style.bottom === "0px" && (p.scrollTop = w > 0 ? w : 0, d.style.justifyContent = "flex-end");
                }
              }
            }
            c.current = p.scrollTop;
          })
        }
      ) })
    ] });
  }
);
Ke.displayName = Pe;
const It = "SelectGroup", [Do, ko] = ue(It), We = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, ...t } = r, o = ne();
    return /* @__PURE__ */ f(Do, { scope: e, id: o, children: /* @__PURE__ */ f(N.div, { role: "group", "aria-labelledby": o, ...t, ref: s }) });
  }
);
We.displayName = It;
const yt = "SelectLabel", ze = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, ...t } = r, o = ko(yt, e);
    return /* @__PURE__ */ f(N.div, { id: o.id, ...t, ref: s });
  }
);
ze.displayName = yt;
const ge = "SelectItem", [Fo, Tt] = ue(ge), Ge = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, value: t, disabled: o = !1, textValue: n, ...i } = r, c = Y(ge, e), a = J(ge, e), p = typeof t == "string" ? Array.isArray(c.value) ? c.value.includes(t) : c.value === t : t.every((g) => c.value?.includes(g)), d = Array.isArray(c.value) && Array.isArray(t) && t.some((g) => c.value?.includes(g)), [m, h] = l.useState(n ?? ""), [u, x] = l.useState(!1), v = A(
      s,
      (g) => a.itemRefCallback?.(g, t, o)
    ), C = ne(), b = () => {
      if (!o) {
        let g = c.multi && typeof t == "string" ? [t] : t;
        d && !p ? c.onValueChange(g) : Array.isArray(c.value) && (g = Nt(t, c.value)), c.onValueChange(g), c.multi || c.onOpenChange(!1);
      }
    };
    if (!c.multi && Array.isArray(t))
      throw new Error("You can only pass an array of values in multi selects");
    return /* @__PURE__ */ f(
      Fo,
      {
        scope: e,
        value: t,
        disabled: o,
        textId: C,
        isSelected: p,
        isIntermediate: d,
        onItemTextChange: l.useCallback((g) => {
          h((w) => w || (g?.textContent ?? "").trim());
        }, []),
        children: /* @__PURE__ */ f(ve.ItemSlot, { scope: e, value: t, disabled: o, textValue: m, children: /* @__PURE__ */ f(
          N.div,
          {
            role: "option",
            "aria-labelledby": C,
            "data-highlighted": u ? "" : void 0,
            "aria-selected": c.multi ? void 0 : p && u,
            "aria-checked": c.multi ? p : void 0,
            "data-state": p ? "checked" : "unchecked",
            "aria-disabled": o || void 0,
            "data-disabled": o ? "" : void 0,
            tabIndex: o ? void 0 : -1,
            ...i,
            ref: v,
            onFocus: T(i.onFocus, () => x(!0)),
            onBlur: T(i.onBlur, () => x(!1)),
            onPointerUp: T(i.onPointerUp, b),
            onPointerMove: T(i.onPointerMove, (g) => {
              o ? a.onItemLeave?.() : g.currentTarget.focus({ preventScroll: !0 });
            }),
            onPointerLeave: T(i.onPointerLeave, (g) => {
              g.currentTarget === document.activeElement && a.onItemLeave?.();
            }),
            onKeyDown: T(i.onKeyDown, (g) => {
              a.searchRef?.current !== "" && g.key === " " || (Io.includes(g.key) && b(), g.key === " " && g.preventDefault());
            })
          }
        ) })
      }
    );
  }
);
Ge.displayName = ge;
const pe = "SelectItemText", je = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, className: t, style: o, ...n } = r, i = Y(pe, e), c = J(pe, e), a = Tt(pe, e), p = Eo(pe, e), [d, m] = l.useState(null), h = A(
      s,
      (b) => m(b),
      a.onItemTextChange,
      (b) => c.itemTextRefCallback?.(b, a.value, a.disabled)
    ), u = d?.textContent, x = l.useMemo(
      () => /* @__PURE__ */ f(
        "option",
        {
          value: a.value,
          disabled: a.disabled,
          children: u
        },
        Array.isArray(a.value) ? a.value.join(";") : a.value
      ),
      [a.disabled, a.value, u]
    ), { onNativeOptionAdd: v, onNativeOptionRemove: C } = p;
    return F(() => (v(x), () => C(x)), [v, C, x]), /* @__PURE__ */ Ae(_e, { children: [
      /* @__PURE__ */ f(N.span, { id: a.textId, ...n, ref: h }),
      a.isSelected && i.valueNode && !i.valueNodeHasChildren ? xe.createPortal(n.children, i.valueNode) : null
    ] });
  }
);
je.displayName = pe;
const Vt = "SelectItemIndicator", Ye = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, children: t, ...o } = r, n = Tt(Vt, e);
    return typeof t == "function" ? /* @__PURE__ */ f(N.span, { "aria-hidden": !0, ...o, ref: s, children: t({
      isSelected: n.isSelected,
      isIntermediate: n.isIntermediate
    }) }) : n.isSelected ? /* @__PURE__ */ f(N.span, { "aria-hidden": !0, ...o, ref: s, children: t }) : null;
  }
);
Ye.displayName = Vt;
const Ee = "SelectScrollUpButton", qe = l.forwardRef(
  (r, s) => {
    const e = J(Ee, r.__scopeSelect), t = Ue(Ee, r.__scopeSelect), [o, n] = l.useState(!1), i = A(s, t.onScrollButtonChange);
    return F(() => {
      if (e.viewport && e.isPositioned) {
        const c = e.viewport, a = () => {
          const p = c.scrollTop > 0;
          n(p);
        };
        return a(), c.addEventListener("scroll", a), () => c.removeEventListener("scroll", a);
      }
    }, [e.viewport, e.isPositioned]), o ? /* @__PURE__ */ f(
      Pt,
      {
        ...r,
        ref: i,
        onAutoScroll: () => {
          const { viewport: c, selectedItem: a } = e;
          c && a && (c.scrollTop -= a.offsetHeight);
        }
      }
    ) : null;
  }
);
qe.displayName = Ee;
const Re = "SelectScrollDownButton", Xe = l.forwardRef(
  (r, s) => {
    const e = J(Re, r.__scopeSelect), t = Ue(Re, r.__scopeSelect), [o, n] = l.useState(!1), i = A(s, t.onScrollButtonChange);
    return F(() => {
      if (e.viewport && e.isPositioned) {
        const c = e.viewport, a = () => {
          const p = c.scrollHeight - c.clientHeight, d = Math.ceil(c.scrollTop) < p;
          n(d);
        };
        return a(), c.addEventListener("scroll", a), () => c.removeEventListener("scroll", a);
      }
    }, [e.viewport, e.isPositioned]), o ? /* @__PURE__ */ f(
      Pt,
      {
        ...r,
        ref: i,
        onAutoScroll: () => {
          const { viewport: c, selectedItem: a } = e;
          c && a && (c.scrollTop += a.offsetHeight);
        }
      }
    ) : null;
  }
);
Xe.displayName = Re;
const Pt = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, onAutoScroll: t, ...o } = r, n = J("SelectScrollButton", e), i = l.useRef(null), c = he(e), a = l.useCallback(() => {
      i.current !== null && (window.clearInterval(i.current), i.current = null);
    }, []);
    return l.useEffect(() => () => a(), [a]), F(() => {
      c().find((d) => d.ref.current === document.activeElement)?.ref.current?.scrollIntoView({ block: "nearest" });
    }, [c]), /* @__PURE__ */ f(
      N.div,
      {
        "aria-hidden": !0,
        ...o,
        ref: s,
        style: { flexShrink: 0, ...o.style },
        onPointerMove: T(o.onPointerMove, () => {
          n.onItemLeave?.(), i.current === null && (i.current = window.setInterval(t, 50));
        }),
        onPointerLeave: T(o.onPointerLeave, () => {
          a();
        })
      }
    );
  }
), Lo = "SelectSeparator", Ze = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, ...t } = r;
    return /* @__PURE__ */ f(N.div, { "aria-hidden": !0, ...t, ref: s });
  }
);
Ze.displayName = Lo;
const Ne = "SelectArrow", Je = l.forwardRef(
  (r, s) => {
    const { __scopeSelect: e, ...t } = r, o = be(e), n = Y(Ne, e), i = J(Ne, e);
    return n.open && i.position === "popper" ? /* @__PURE__ */ f(re.Arrow, { ...o, ...t, ref: s }) : null;
  }
);
Je.displayName = Ne;
const Bo = "BubbleSelect", Ho = l.forwardRef(
  (r, s) => {
    const { value: e, ...t } = r, o = l.useRef(null), n = A(s, o), i = Ot(e), c = Y(Bo, void 0);
    l.useEffect(() => {
      const p = o.current, d = window.HTMLSelectElement.prototype, h = Object.getOwnPropertyDescriptor(d, "value").set;
      if (i !== e && h) {
        const u = new Event("change", { bubbles: !0 });
        h.call(p, e), p.dispatchEvent(u);
      }
    }, [i, e]);
    let a = e;
    return c.multi && !Array.isArray(e) && (a = []), /* @__PURE__ */ f(Dt, { asChild: !0, children: /* @__PURE__ */ f(
      "select",
      {
        ...t,
        multiple: c.multi ? !0 : void 0,
        ref: n,
        defaultValue: a
      }
    ) });
  }
);
Ho.displayName = "BubbleSelect";
function Et(r) {
  const s = Mt(r), e = l.useRef(""), t = l.useRef(0), o = l.useCallback(
    (i) => {
      const c = e.current + i;
      s(c), function a(p) {
        e.current = p, window.clearTimeout(t.current), p !== "" && (t.current = window.setTimeout(() => a(""), 1e3));
      }(c);
    },
    [s]
  ), n = l.useCallback(() => {
    e.current = "", window.clearTimeout(t.current);
  }, []);
  return l.useEffect(() => () => window.clearTimeout(t.current), []), [e, o, n];
}
function Rt(r, s, e) {
  const o = s.length > 1 && Array.from(s).every((p) => p === s[0]) ? s[0] : s, n = e ? r.indexOf(e) : -1;
  let i = $o(r, Math.max(n, 0));
  o.length === 1 && (i = i.filter((p) => p !== e));
  const a = i.find((p) => p.textValue.toLowerCase().startsWith(o.toLowerCase()));
  return a !== e ? a : void 0;
}
function $o(r, s) {
  return r.map((e, t) => r[(s + t) % r.length]);
}
const Nt = (r, s = []) => {
  if (Array.isArray(r))
    return r.reduce((t, o) => Nt(o, t), s);
  const e = s.indexOf(r);
  return e === -1 ? [...s, r] : [...s.slice(0, e), ...s.slice(e + 1)];
}, Uo = ke, Ko = Fe, Wo = Le, zo = Be, Go = He, jo = $e, Yo = Ke, qo = We, Xo = ze, Zo = Ge, Jo = je, Qo = Ye, en = qe, tn = Xe, on = Ze, nn = Je, En = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Arrow: nn,
  Content: jo,
  Group: qo,
  Icon: zo,
  Item: Zo,
  ItemIndicator: Qo,
  ItemText: Jo,
  Label: Xo,
  Portal: Go,
  Root: Uo,
  ScrollDownButton: tn,
  ScrollUpButton: en,
  Select: ke,
  SelectArrow: Je,
  SelectContent: $e,
  SelectGroup: We,
  SelectIcon: Be,
  SelectItem: Ge,
  SelectItemIndicator: Ye,
  SelectItemText: je,
  SelectLabel: ze,
  SelectPortal: He,
  SelectScrollDownButton: Xe,
  SelectScrollUpButton: qe,
  SelectSeparator: Ze,
  SelectTrigger: Fe,
  SelectValue: Le,
  SelectViewport: Ke,
  Separator: on,
  Trigger: Ko,
  Value: Wo,
  Viewport: Yo,
  createSelectScope: To
}, Symbol.toStringTag, { value: "Module" }));
export {
  Pn as Combobox,
  En as Select,
  An as composeEventHandlers,
  Mn as useCallbackRef
};
